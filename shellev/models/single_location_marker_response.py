# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper


class SingleLocationMarkerResponse(object):

    """Implementation of the 'SingleLocationMarkerResponse' model.

    TODO: type model description here.

    Attributes:
        request_id (uuid|str): requestId is unique identifier value that is
            attached to requests and messages that allow reference to a
            particular transaction or event chain.
        status (str): status of the API call
        data (List[SingleLocationMarker | MultiLocationMarker] | None): TODO:
            type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "request_id": 'requestId',
        "status": 'status',
        "data": 'data'
    }

    _optionals = [
        'request_id',
        'status',
        'data',
    ]

    def __init__(self,
                 request_id=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 data=APIHelper.SKIP):
        """Constructor for the SingleLocationMarkerResponse class"""

        # Initialize members of the class
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 
        if status is not APIHelper.SKIP:
            self.status = status 
        if data is not APIHelper.SKIP:
            self.data = data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from shellev.utilities.union_type_lookup import UnionTypeLookUp

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        request_id = dictionary.get("requestId") if dictionary.get("requestId") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        data = APIHelper.deserialize_union_type(UnionTypeLookUp.get('LocationMarker'), dictionary.get('data'), False) if dictionary.get('data') is not None else APIHelper.SKIP
        # Return an object of this model
        return cls(request_id,
                   status,
                   data)
