# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper
from shellev.models.electrical_properties import ElectricalProperties
from shellev.models.tariff_vo import TariffVO


class ConnectorVO(object):

    """Implementation of the 'ConnectorVO' model.

    An EVSE can have one or many Connectors. Each Connector will normally have
    a different socket / cable and only one can be used to charge at a time.

    Attributes:
        uid (int): Internal identifier used to refer to this Connector
        external_id (str): Identifier of the Evse as given by the Operator,
            unique for the containing EVSE'
        connector_type (ConnectorVOConnectorTypeEnum): Type of the connector
            in the EVSE unit.
        electrical_properties (ElectricalProperties): Electrical Properties of
            the Connector
        fixed_cable (bool): Indicates whether Connector has a fixed cable
            attached. False by default (not sent in this case)
        tariff (TariffVO): Tariff details for charging on this Connector
        updated (str): ISO8601-compliant UTC datetime of the last update of
            the Connectorâ€™s data
        updated_by (ConnectorVOUpdatedByEnum): Source of the last update
        deleted (str): optional  ISO8601-compliant UTC deletion timestamp of
            the connector

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uid": 'uid',
        "external_id": 'externalId',
        "connector_type": 'connectorType',
        "electrical_properties": 'electricalProperties',
        "fixed_cable": 'fixedCable',
        "tariff": 'tariff',
        "updated": 'updated',
        "updated_by": 'updatedBy',
        "deleted": 'deleted'
    }

    _optionals = [
        'uid',
        'external_id',
        'connector_type',
        'electrical_properties',
        'fixed_cable',
        'tariff',
        'updated',
        'updated_by',
        'deleted',
    ]

    def __init__(self,
                 uid=APIHelper.SKIP,
                 external_id=APIHelper.SKIP,
                 connector_type=APIHelper.SKIP,
                 electrical_properties=APIHelper.SKIP,
                 fixed_cable=APIHelper.SKIP,
                 tariff=APIHelper.SKIP,
                 updated=APIHelper.SKIP,
                 updated_by=APIHelper.SKIP,
                 deleted=APIHelper.SKIP):
        """Constructor for the ConnectorVO class"""

        # Initialize members of the class
        if uid is not APIHelper.SKIP:
            self.uid = uid 
        if external_id is not APIHelper.SKIP:
            self.external_id = external_id 
        if connector_type is not APIHelper.SKIP:
            self.connector_type = connector_type 
        if electrical_properties is not APIHelper.SKIP:
            self.electrical_properties = electrical_properties 
        if fixed_cable is not APIHelper.SKIP:
            self.fixed_cable = fixed_cable 
        if tariff is not APIHelper.SKIP:
            self.tariff = tariff 
        if updated is not APIHelper.SKIP:
            self.updated = updated 
        if updated_by is not APIHelper.SKIP:
            self.updated_by = updated_by 
        if deleted is not APIHelper.SKIP:
            self.deleted = deleted 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uid = dictionary.get("uid") if dictionary.get("uid") else APIHelper.SKIP
        external_id = dictionary.get("externalId") if dictionary.get("externalId") else APIHelper.SKIP
        connector_type = dictionary.get("connectorType") if dictionary.get("connectorType") else APIHelper.SKIP
        electrical_properties = ElectricalProperties.from_dictionary(dictionary.get('electricalProperties')) if 'electricalProperties' in dictionary.keys() else APIHelper.SKIP
        fixed_cable = dictionary.get("fixedCable") if "fixedCable" in dictionary.keys() else APIHelper.SKIP
        tariff = TariffVO.from_dictionary(dictionary.get('tariff')) if 'tariff' in dictionary.keys() else APIHelper.SKIP
        updated = dictionary.get("updated") if dictionary.get("updated") else APIHelper.SKIP
        updated_by = dictionary.get("updatedBy") if dictionary.get("updatedBy") else APIHelper.SKIP
        deleted = dictionary.get("deleted") if dictionary.get("deleted") else APIHelper.SKIP
        # Return an object of this model
        return cls(uid,
                   external_id,
                   connector_type,
                   electrical_properties,
                   fixed_cable,
                   tariff,
                   updated,
                   updated_by,
                   deleted)
