# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper


class DataRetrieve(object):

    """Implementation of the 'Data_Retrieve' model.

    TODO: type model description here.

    Attributes:
        id (uuid|str): Id of the session
        user_id (str): Id of the user that started the session
        ema_id (str): Id of the evse that the user is charging
        evse_id (str): Ema-id of the charge token that is used
        started_at (datetime): When the session is started
        stopped_at (datetime): When the session is stopped
        session_state (DataRetrieveSessionStateEnum): Describes the session
            state
        session_code (DataRetrieveSessionCodeEnum): Session code e.g
            InternalError
        session_message (str): Session message

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'Id',
        "user_id": 'UserId',
        "ema_id": 'EmaId',
        "evse_id": 'EvseId',
        "started_at": 'StartedAt',
        "stopped_at": 'StoppedAt',
        "session_state": 'SessionState',
        "session_code": 'SessionCode',
        "session_message": 'SessionMessage'
    }

    _optionals = [
        'id',
        'user_id',
        'ema_id',
        'evse_id',
        'started_at',
        'stopped_at',
        'session_state',
        'session_code',
        'session_message',
    ]

    _nullables = [
        'stopped_at',
        'session_code',
        'session_message',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 user_id=APIHelper.SKIP,
                 ema_id=APIHelper.SKIP,
                 evse_id=APIHelper.SKIP,
                 started_at=APIHelper.SKIP,
                 stopped_at=APIHelper.SKIP,
                 session_state=APIHelper.SKIP,
                 session_code=APIHelper.SKIP,
                 session_message=APIHelper.SKIP):
        """Constructor for the DataRetrieve class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if user_id is not APIHelper.SKIP:
            self.user_id = user_id 
        if ema_id is not APIHelper.SKIP:
            self.ema_id = ema_id 
        if evse_id is not APIHelper.SKIP:
            self.evse_id = evse_id 
        if started_at is not APIHelper.SKIP:
            self.started_at = APIHelper.apply_datetime_converter(started_at, APIHelper.RFC3339DateTime) if started_at else None 
        if stopped_at is not APIHelper.SKIP:
            self.stopped_at = APIHelper.apply_datetime_converter(stopped_at, APIHelper.RFC3339DateTime) if stopped_at else None 
        if session_state is not APIHelper.SKIP:
            self.session_state = session_state 
        if session_code is not APIHelper.SKIP:
            self.session_code = session_code 
        if session_message is not APIHelper.SKIP:
            self.session_message = session_message 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("Id") if dictionary.get("Id") else APIHelper.SKIP
        user_id = dictionary.get("UserId") if dictionary.get("UserId") else APIHelper.SKIP
        ema_id = dictionary.get("EmaId") if dictionary.get("EmaId") else APIHelper.SKIP
        evse_id = dictionary.get("EvseId") if dictionary.get("EvseId") else APIHelper.SKIP
        started_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("StartedAt")).datetime if dictionary.get("StartedAt") else APIHelper.SKIP
        if 'StoppedAt' in dictionary.keys():
            stopped_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("StoppedAt")).datetime if dictionary.get("StoppedAt") else None
        else:
            stopped_at = APIHelper.SKIP
        session_state = dictionary.get("SessionState") if dictionary.get("SessionState") else APIHelper.SKIP
        session_code = dictionary.get("SessionCode") if "SessionCode" in dictionary.keys() else APIHelper.SKIP
        session_message = dictionary.get("SessionMessage") if "SessionMessage" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   user_id,
                   ema_id,
                   evse_id,
                   started_at,
                   stopped_at,
                   session_state,
                   session_code,
                   session_message)
