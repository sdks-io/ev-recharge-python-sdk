# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper


class Tariff(object):

    """Implementation of the 'Tariff' model.

    TODO: type model description here.

    Attributes:
        start_fee (float): Tariff to start a charging session
        per_minute (float): Tariff per minute of charging time
        per_k_wh (float): Tariff per kWh of energy consumed
        currency (str): ISO 4217 Currency Code of the local currency.
        updated (str): ISO8601-compliant UTC datetime of the last update of
            the Tariff
        updated_by (TariffVOUpdatedByEnum): TODO: type description here.
        structure (str): Tariff structure that this tariff belongs to,
            typically Default unless specific tariff is defined for provider

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "start_fee": 'startFee',
        "per_minute": 'perMinute',
        "per_k_wh": 'perKWh',
        "currency": 'currency',
        "updated": 'updated',
        "updated_by": 'updatedBy',
        "structure": 'structure'
    }

    _optionals = [
        'start_fee',
        'per_minute',
        'per_k_wh',
        'currency',
        'updated',
        'updated_by',
        'structure',
    ]

    def __init__(self,
                 start_fee=APIHelper.SKIP,
                 per_minute=APIHelper.SKIP,
                 per_k_wh=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 updated=APIHelper.SKIP,
                 updated_by=APIHelper.SKIP,
                 structure=APIHelper.SKIP):
        """Constructor for the Tariff class"""

        # Initialize members of the class
        if start_fee is not APIHelper.SKIP:
            self.start_fee = start_fee 
        if per_minute is not APIHelper.SKIP:
            self.per_minute = per_minute 
        if per_k_wh is not APIHelper.SKIP:
            self.per_k_wh = per_k_wh 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if updated is not APIHelper.SKIP:
            self.updated = updated 
        if updated_by is not APIHelper.SKIP:
            self.updated_by = updated_by 
        if structure is not APIHelper.SKIP:
            self.structure = structure 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        start_fee = dictionary.get("startFee") if dictionary.get("startFee") else APIHelper.SKIP
        per_minute = dictionary.get("perMinute") if dictionary.get("perMinute") else APIHelper.SKIP
        per_k_wh = dictionary.get("perKWh") if dictionary.get("perKWh") else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        updated = dictionary.get("updated") if dictionary.get("updated") else APIHelper.SKIP
        updated_by = dictionary.get("updatedBy") if dictionary.get("updatedBy") else APIHelper.SKIP
        structure = dictionary.get("structure") if dictionary.get("structure") else APIHelper.SKIP
        # Return an object of this model
        return cls(start_fee,
                   per_minute,
                   per_k_wh,
                   currency,
                   updated,
                   updated_by,
                   structure)
