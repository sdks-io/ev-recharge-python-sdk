# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper
from shellev.models.accessibility import Accessibility
from shellev.models.address import Address
from shellev.models.coordinates import Coordinates
from shellev.models.evse_vo import EvseVO
from shellev.models.opening_hours_object import OpeningHoursObject


class LocationResponeObject(object):

    """Implementation of the 'LocationResponeObject' model.

    TODO: type model description here.

    Attributes:
        uid (int): Unique Internal identifier used to refer to this Location
            by Shell Recharge
        external_id (str): Identifier as given by the Shell Recharge Operator,
            unique for that Operator
        coordinates (Coordinates): Coordinates of the Shell Recharge Site
            Location
        operator_name (str): Operator of this Shell Recharge Location
        address (Address): Address of the Shell Recharge Location
        accessibility (Accessibility): Accessibility of the Location
        evses (List[EvseVO]): TODO: type description here.
        opening_hours (List[OpeningHoursObject]): Optional Opening Hours of
            the Location. Please note that it is not available for all sites.
        updated (str): ISO8601-compliant UTC datetime of the last update of
            the location
        operator_comment (str): optional Operator-wide arbitrary text (eg
            promotional, warning)
        location_type (str): the type of the location. Could be "UNKNOWN".

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uid": 'uid',
        "external_id": 'externalId',
        "coordinates": 'coordinates',
        "operator_name": 'operatorName',
        "address": 'address',
        "accessibility": 'accessibility',
        "evses": 'evses',
        "opening_hours": 'openingHours',
        "updated": 'updated',
        "operator_comment": 'operatorComment',
        "location_type": 'locationType'
    }

    _optionals = [
        'uid',
        'external_id',
        'coordinates',
        'operator_name',
        'address',
        'accessibility',
        'evses',
        'opening_hours',
        'updated',
        'operator_comment',
        'location_type',
    ]

    def __init__(self,
                 uid=APIHelper.SKIP,
                 external_id=APIHelper.SKIP,
                 coordinates=APIHelper.SKIP,
                 operator_name=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 accessibility=APIHelper.SKIP,
                 evses=APIHelper.SKIP,
                 opening_hours=APIHelper.SKIP,
                 updated=APIHelper.SKIP,
                 operator_comment=APIHelper.SKIP,
                 location_type=APIHelper.SKIP):
        """Constructor for the LocationResponeObject class"""

        # Initialize members of the class
        if uid is not APIHelper.SKIP:
            self.uid = uid 
        if external_id is not APIHelper.SKIP:
            self.external_id = external_id 
        if coordinates is not APIHelper.SKIP:
            self.coordinates = coordinates 
        if operator_name is not APIHelper.SKIP:
            self.operator_name = operator_name 
        if address is not APIHelper.SKIP:
            self.address = address 
        if accessibility is not APIHelper.SKIP:
            self.accessibility = accessibility 
        if evses is not APIHelper.SKIP:
            self.evses = evses 
        if opening_hours is not APIHelper.SKIP:
            self.opening_hours = opening_hours 
        if updated is not APIHelper.SKIP:
            self.updated = updated 
        if operator_comment is not APIHelper.SKIP:
            self.operator_comment = operator_comment 
        if location_type is not APIHelper.SKIP:
            self.location_type = location_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uid = dictionary.get("uid") if dictionary.get("uid") else APIHelper.SKIP
        external_id = dictionary.get("externalId") if dictionary.get("externalId") else APIHelper.SKIP
        coordinates = Coordinates.from_dictionary(dictionary.get('coordinates')) if 'coordinates' in dictionary.keys() else APIHelper.SKIP
        operator_name = dictionary.get("operatorName") if dictionary.get("operatorName") else APIHelper.SKIP
        address = Address.from_dictionary(dictionary.get('address')) if 'address' in dictionary.keys() else APIHelper.SKIP
        accessibility = Accessibility.from_dictionary(dictionary.get('accessibility')) if 'accessibility' in dictionary.keys() else APIHelper.SKIP
        evses = None
        if dictionary.get('evses') is not None:
            evses = [EvseVO.from_dictionary(x) for x in dictionary.get('evses')]
        else:
            evses = APIHelper.SKIP
        opening_hours = None
        if dictionary.get('openingHours') is not None:
            opening_hours = [OpeningHoursObject.from_dictionary(x) for x in dictionary.get('openingHours')]
        else:
            opening_hours = APIHelper.SKIP
        updated = dictionary.get("updated") if dictionary.get("updated") else APIHelper.SKIP
        operator_comment = dictionary.get("operatorComment") if dictionary.get("operatorComment") else APIHelper.SKIP
        location_type = dictionary.get("locationType") if dictionary.get("locationType") else APIHelper.SKIP
        # Return an object of this model
        return cls(uid,
                   external_id,
                   coordinates,
                   operator_name,
                   address,
                   accessibility,
                   evses,
                   opening_hours,
                   updated,
                   operator_comment,
                   location_type)
