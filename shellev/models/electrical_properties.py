# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper


class ElectricalProperties(object):

    """Implementation of the 'ElectricalProperties' model.

    Electrical Properties of the Connector

    Attributes:
        power_type (ElectricalPropertiesPowerTypeEnum): Power Type used in
            this connector.
        voltage (float): Voltage in Volts for this connector
        amperage (float): Electric Current in Amperes for this connector
        max_electric_power (float): Power in Kilowatts for this connector

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "power_type": 'powerType',
        "voltage": 'voltage',
        "amperage": 'amperage',
        "max_electric_power": 'maxElectricPower'
    }

    _optionals = [
        'power_type',
        'voltage',
        'amperage',
        'max_electric_power',
    ]

    def __init__(self,
                 power_type=APIHelper.SKIP,
                 voltage=APIHelper.SKIP,
                 amperage=APIHelper.SKIP,
                 max_electric_power=APIHelper.SKIP):
        """Constructor for the ElectricalProperties class"""

        # Initialize members of the class
        if power_type is not APIHelper.SKIP:
            self.power_type = power_type 
        if voltage is not APIHelper.SKIP:
            self.voltage = voltage 
        if amperage is not APIHelper.SKIP:
            self.amperage = amperage 
        if max_electric_power is not APIHelper.SKIP:
            self.max_electric_power = max_electric_power 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        power_type = dictionary.get("powerType") if dictionary.get("powerType") else APIHelper.SKIP
        voltage = dictionary.get("voltage") if dictionary.get("voltage") else APIHelper.SKIP
        amperage = dictionary.get("amperage") if dictionary.get("amperage") else APIHelper.SKIP
        max_electric_power = dictionary.get("maxElectricPower") if dictionary.get("maxElectricPower") else APIHelper.SKIP
        # Return an object of this model
        return cls(power_type,
                   voltage,
                   amperage,
                   max_electric_power)
