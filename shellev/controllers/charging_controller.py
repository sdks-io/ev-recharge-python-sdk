# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from shellev.api_helper import APIHelper
from shellev.configuration import Server
from shellev.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from shellev.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from shellev.models.inline_response_202 import InlineResponse202
from shellev.models.inline_response_2021 import InlineResponse2021
from shellev.models.get_charge_session_retrieve_response_200_json import GetChargeSessionRetrieveResponse200Json
from shellev.models.active_response_200_json import ActiveResponse200Json
from shellev.exceptions.bad_request_exception import BadRequestException
from shellev.exceptions.unauthorized_exception import UnauthorizedException
from shellev.exceptions.not_found_exception import NotFoundException
from shellev.exceptions.too_many_requests_exception import TooManyRequestsException
from shellev.exceptions.internal_server_error_exception import InternalServerErrorException
from shellev.exceptions.serviceunavailable_exception import ServiceunavailableException


class ChargingController(BaseController):

    """A Controller to access Endpoints in the shellev API."""
    def __init__(self, config):
        super(ChargingController, self).__init__(config)

    def start(self,
              request_id,
              body=None):
        """Does a POST request to /charge-session/start.

        This endpoint start the charging session for the user.

        Args:
            request_id (uuid|str): RequestId must be unique identifier value
                that can be used by the consumer to correlate each request
                /response .<br>Format.<br> Its canonical textual
                representation, the 16 octets of a UUID are represented as 32
                hexadecimal (base-16) digits, displayed in five groups
                separated by hyphens, in the form 8-4-4-4-12 for a total of 36
                characters (32 hexadecimal characters and 4 hyphens) <br>
            body (ChargesessionStartBody, optional): TODO: type description
                here.

        Returns:
            InlineResponse202: Response from the API. SUCCESS

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/charge-session/start')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(InlineResponse202.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', BadRequestException)
            .local_error('401', 'The request has not been applied because it lacks valid authentication credentials for the target resource.', UnauthorizedException)
            .local_error('404', 'Location Not Found', NotFoundException)
            .local_error('429', 'The Request reached maximum allocated rate limit', TooManyRequestsException)
            .local_error('500', 'Internal Server error', InternalServerErrorException)
            .local_error('503', 'Service unavailable', ServiceunavailableException)
        ).execute()

    def stop(self,
             request_id,
             session_id):
        """Does a POST request to /charge-session/stop.

        Accepts a request to stop an active session when a valid session id is
        provided.

        Args:
            request_id (uuid|str): RequestId must be unique identifier value
                that can be used by the consumer to correlate each request
                /response .<br>Format.<br> Its canonical textual
                representation, the 16 octets of a UUID are represented as 32
                hexadecimal (base-16) digits, displayed in five groups
                separated by hyphens, in the form 8-4-4-4-12 for a total of 36
                characters (32 hexadecimal characters and 4 hyphens) <br>
            session_id (str): Session Id

        Returns:
            InlineResponse2021: Response from the API. SUCCESS

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/charge-session/stop')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .query_param(Parameter()
                         .key('sessionId')
                         .value(session_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(InlineResponse2021.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', BadRequestException)
            .local_error('401', 'The request has not been applied because it lacks valid authentication credentials for the target resource.', UnauthorizedException)
            .local_error('404', 'Location Not Found', NotFoundException)
            .local_error('429', 'The Request reached maximum allocated rate limit', TooManyRequestsException)
            .local_error('500', 'Internal Server error', InternalServerErrorException)
            .local_error('503', 'Service unavailable', ServiceunavailableException)
        ).execute()

    def get_charge_session_retrieve(self,
                                    request_id,
                                    session_id):
        """Does a GET request to /charge-session/retrieve.

        This endpoint returns the details of the session if the session is
        found.

        Args:
            request_id (uuid|str): RequestId must be unique identifier value
                that can be used by the consumer to correlate each request
                /response .<br>Format.<br> Its canonical textual
                representation, the 16 octets of a UUID are represented as 32
                hexadecimal (base-16) digits, displayed in five groups
                separated by hyphens, in the form 8-4-4-4-12 for a total of 36
                characters (32 hexadecimal characters and 4 hyphens) <br>
            session_id (str): Session Id

        Returns:
            GetChargeSessionRetrieveResponse200Json: Response from the API.
                Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/charge-session/retrieve')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .query_param(Parameter()
                         .key('sessionId')
                         .value(session_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetChargeSessionRetrieveResponse200Json.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', BadRequestException)
            .local_error('401', 'The request has not been applied because it lacks valid authentication credentials for the target resource.', UnauthorizedException)
            .local_error('404', 'Location Not Found', NotFoundException)
            .local_error('429', 'The Request reached maximum allocated rate limit', TooManyRequestsException)
            .local_error('500', 'Internal Server error', InternalServerErrorException)
            .local_error('503', 'Service unavailable', ServiceunavailableException)
        ).execute()

    def active(self,
               request_id,
               ema_id):
        """Does a GET request to /charge-session/active.

        Fetrches the active sessions for user.

        Args:
            request_id (uuid|str): RequestId must be unique identifier value
                that can be used by the consumer to correlate each request
                /response .<br>Format.<br> Its canonical textual
                representation, the 16 octets of a UUID are represented as 32
                hexadecimal (base-16) digits, displayed in five groups
                separated by hyphens, in the form 8-4-4-4-12 for a total of 36
                characters (32 hexadecimal characters and 4 hyphens) <br>
            ema_id (str): Emobility Account Identifier(Ema-ID)

        Returns:
            ActiveResponse200Json: Response from the API. SUCCESS

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/charge-session/active')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .query_param(Parameter()
                         .key('emaId')
                         .value(ema_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ActiveResponse200Json.from_dictionary)
        ).execute()
