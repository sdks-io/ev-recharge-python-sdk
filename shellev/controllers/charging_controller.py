# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from shellev.api_helper import APIHelper
from shellev.configuration import Server
from shellev.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from shellev.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from shellev.models.inline_response_202 import InlineResponse202
from shellev.models.inline_response_2021 import InlineResponse2021
from shellev.models.get_charge_session_retrieve_response_200_json import GetChargeSessionRetrieveResponse200Json
from shellev.models.active_response_200_json import ActiveResponse200Json
from shellev.exceptions.m_400_error_response_error_1_exception import M400ErrorResponseError1Exception
from shellev.exceptions.http_401_error_response_exception import HTTP401ErrorResponseException
from shellev.exceptions.m_404_error_response_error_1_exception import M404ErrorResponseError1Exception
from shellev.exceptions.m_405_error_response_error_1_exception import M405ErrorResponseError1Exception
from shellev.exceptions.m_429_error_response_error_1_exception import M429ErrorResponseError1Exception
from shellev.exceptions.m_500_error_response_error_1_exception import M500ErrorResponseError1Exception
from shellev.exceptions.m_503_error_response_error_1_exception import M503ErrorResponseError1Exception
from shellev.exceptions.m_401_error_response_error_1_exception import M401ErrorResponseError1Exception


class ChargingController(BaseController):

    """A Controller to access Endpoints in the shellev API."""
    def __init__(self, config):
        super(ChargingController, self).__init__(config)

    def start_charge_session(self,
                             request_id,
                             body=None):
        """Does a POST request to /ev/v1/charge-session/start.

        This API initiates to start a session on a EVSE (Electric Vehicle
        Supply Equipement). When the EV Charge Card number and the unique EVSE
        ID on the location is provided, the session is initiated. 
        Please note that this is an asynchronous request, the request will be
        passed on to the operator/platform to be processed further. 

        Args:
            request_id (uuid|str): A unique request id in GUID format. The
                value is written to the Shell API Platform audit log for end
                to end traceability of a request.
            body (ChargesessionStartBody, optional): TODO: type description
                here.

        Returns:
            InlineResponse202: Response from the API. SUCCESS

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/ev/v1/charge-session/start')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(InlineResponse202.from_dictionary)
            .local_error('400', 'Bad Request\n', M400ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', HTTP401ErrorResponseException)
            .local_error('404', 'Invalid charge token with given EmaId was not found.\n\nBackend HTTP 410 should be transformed to 404.', M404ErrorResponseError1Exception)
            .local_error('405', 'Method Not Allowed', M405ErrorResponseError1Exception)
            .local_error('429', 'Too Many Requests', M429ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', M500ErrorResponseError1Exception)
            .local_error('503', 'Returned when a connectivity failure is encountered like DB connection failed, endpoint failed etc or when max number of retries are completed', M503ErrorResponseError1Exception)
        ).execute()

    def stop_charge_session(self,
                            request_id,
                            uuid,
                            body=None):
        """Does a POST request to /ev/v1/charge-session/stop/{uuid}.

        This API stops a session by providing the session ID which was
        retrieved when starting the session. HTTP 202 response will be
        returned if the request is accepted. Once the session is stopped the
        response will contain the DateTime on which it is stopped.     
        operationId: Stop

        Args:
            request_id (uuid|str): A unique request id in GUID format. The
                value is written to the Shell API Platform audit log for end
                to end traceability of a request.
            uuid (uuid|str): Unique session ID which was generated to activate
                a charging session.
            body (StopChargeSessionRequestBodyJson, optional): TODO: type
                description here.

        Returns:
            InlineResponse2021: Response from the API. SUCCESS

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/ev/v1/charge-session/stop/{uuid}')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .template_param(Parameter()
                            .key('uuid')
                            .value(uuid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(InlineResponse2021.from_dictionary)
            .local_error('400', 'Bad Request\n', M400ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', M401ErrorResponseError1Exception)
            .local_error('404', 'Session not found or Session has already been stopped. Map 410 Error message into 404.', M404ErrorResponseError1Exception)
            .local_error('405', 'Method Not Allowed', M405ErrorResponseError1Exception)
            .local_error('429', 'Too Many Requests', M429ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', M500ErrorResponseError1Exception)
            .local_error('503', 'Returned when a connectivity failure is encountered like DB connection failed, endpoint failed etc or when max number of retries are completed\n', M503ErrorResponseError1Exception)
        ).execute()

    def get_charge_session_retrieve(self,
                                    request_id,
                                    session_id,
                                    uuid):
        """Does a GET request to /ev/v1/charge-session/retrieve/{uuid}.

        This API retrieves the status and details of the session which was
        started by the user. The session ID generated earlier needs to be
        passed in this API in order to retrieve the status.

        Args:
            request_id (uuid|str): A unique request id in GUID format. The
                value is written to the Shell API Platform audit log for end
                to end traceability of a request.
            session_id (str): Session Id is to be fetched
            uuid (uuid|str): Unique session ID which was generated to activate
                a charging session.

        Returns:
            GetChargeSessionRetrieveResponse200Json: Response from the API.
                Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/ev/v1/charge-session/retrieve/{uuid}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .query_param(Parameter()
                         .key('SessionId')
                         .value(session_id))
            .template_param(Parameter()
                            .key('uuid')
                            .value(uuid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetChargeSessionRetrieveResponse200Json.from_dictionary)
            .local_error('400', 'Bad Request', M400ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', M401ErrorResponseError1Exception)
            .local_error('404', 'Not Found', M404ErrorResponseError1Exception)
            .local_error('405', 'Method Not Allowed', M405ErrorResponseError1Exception)
            .local_error('429', 'Too Many Requests', M429ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', M500ErrorResponseError1Exception)
            .local_error('503', 'Service Unavailable', M503ErrorResponseError1Exception)
        ).execute()

    def active(self,
               ema_id,
               request_id):
        """Does a GET request to /ev/v1/charge-session/active.

        This API retrieves the list of active sessions for a given set of
        EMAIds

        Args:
            ema_id (str): Emobility Account Identifier(Ema-ID)
            request_id (uuid|str): A unique request id in GUID format. The
                value is written to the Shell API Platform audit log for end
                to end traceability of a request.

        Returns:
            ActiveResponse200Json: Response from the API. SUCCESS

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/ev/v1/charge-session/active')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('EmaId')
                         .value(ema_id))
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ActiveResponse200Json.from_dictionary)
            .local_error('400', 'Bad Request\n', M400ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', M401ErrorResponseError1Exception)
            .local_error('404', 'Session not found or Session has already been stopped. Map 410 Error message into 404.', M404ErrorResponseError1Exception)
            .local_error('405', 'Method Not Allowed', M405ErrorResponseError1Exception)
            .local_error('429', 'Too Many Requests', M429ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', M500ErrorResponseError1Exception)
            .local_error('503', 'Returned when a connectivity failure is encountered like DB connection failed, endpoint failed etc or when max number of retries are completed\n', M503ErrorResponseError1Exception)
        ).execute()
