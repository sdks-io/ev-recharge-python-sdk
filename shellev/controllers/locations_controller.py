# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from shellev.api_helper import APIHelper
from shellev.configuration import Server
from shellev.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from shellev.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from shellev.models.response import Response
from shellev.models.single_location_marker_response import SingleLocationMarkerResponse
from shellev.exceptions.bad_request_exception import BadRequestException
from shellev.exceptions.unauthorized_exception import UnauthorizedException
from shellev.exceptions.not_found_exception import NotFoundException
from shellev.exceptions.too_many_requests_exception import TooManyRequestsException
from shellev.exceptions.internal_server_error_exception import InternalServerErrorException
from shellev.exceptions.serviceunavailable_exception import ServiceunavailableException


class LocationsController(BaseController):

    """A Controller to access Endpoints in the shellev API."""
    def __init__(self, config):
        super(LocationsController, self).__init__(config)

    def get_ev_locations(self,
                         request_id,
                         evse_status=None,
                         connector_types=None,
                         connector_min_power=None,
                         authorization_methods=None,
                         with_operator_name=None,
                         evse_id=None,
                         location_external_id=None,
                         evse_external_id=None,
                         page_number=None,
                         per_page=None,
                         updated_since=None,
                         country=None,
                         exclude_country=None):
        """Does a GET request to /locations/v1/ev.

        This API provides the list of all Shell Recharge locations. The list
        includes all Shell Recharge network and all locations available
        through our roaming partners. The end point provides flexible search
        criteria in order to get the list of Shell Recharge Network. The end
        point provides the details such as the exact location/address of the
        site along with the up-to-date status information of all the charging
        units in the site. 
        Supported Search Options
        * Based on status of the Charging units. Eg : Available or Occupied
        * Based on available connector types.
        * Based on minimum Power output (in kW) available
        * Based on a specific charging unit ID (EVSE ID)

        Args:
            request_id (uuid|str): RequestId must be unique identifier value
                that can be used by the consumer to correlate each request
                /response .<br>Format.<br> Its canonical textual
                representation, the 16 octets of a UUID are represented as 32
                hexadecimal (base-16) digits, displayed in five groups
                separated by hyphens, in the form 8-4-4-4-12 for a total of 36
                characters (32 hexadecimal characters and 4 hyphens) <br>
            evse_status (GetEVLocationsEvseStatusEnum, optional): Filter by
                Locations that have the given status
            connector_types (GetEVLocationsConnectorTypesEnum, optional):
                Filter by Locations that have Connectors with the set of
                Connector Types
            connector_min_power (float, optional): Filter by Locations that
                have a Connector with at least this power output (in kW)
            authorization_methods (GetEVLocationsAuthorizationMethodsEnum,
                optional): Filter by Locations that support the given
                Authorization Methods
            with_operator_name (bool, optional): Return operator name in
                marker response object
            evse_id (str, optional): optional Standard EVSE (Electric Vehicle
                Supply Equipment) Id identifier (ISO-IEC-15118)
            location_external_id (str, optional): Filter by Locations with the
                given externalId. (Unique Location externalID provided by
                Shell Recharge)
            evse_external_id (str, optional): Filter by Locations that have an
                Evse with the given External Id. (Unique individual EVSE
                externalID provided by Shell Recharge)
            page_number (int, optional): Restrict the response list by
                providing a specific set of page Number. Set perPage parameter
                also when page Number is used.
            per_page (int, optional): Restrict the number of sites in response
                per page.
            updated_since (str, optional): ZonedDateTime as string
            country (List[str], optional): Filter by Locations that are at
                least in one of the given countries (specified using ISO
                3166-1 alpha-3 codes)
            exclude_country (List[str], optional): Filter by Locations that
                are not in one of the given countries (specified using ISO
                3166-1 alpha-3 codes)

        Returns:
            Response: Response from the API. Paginated list of locations

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locations/v1/ev')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .query_param(Parameter()
                         .key('evseStatus')
                         .value(evse_status))
            .query_param(Parameter()
                         .key('connectorTypes')
                         .value(connector_types))
            .query_param(Parameter()
                         .key('connectorMinPower')
                         .value(connector_min_power))
            .query_param(Parameter()
                         .key('authorizationMethods')
                         .value(authorization_methods))
            .query_param(Parameter()
                         .key('withOperatorName')
                         .value(with_operator_name))
            .query_param(Parameter()
                         .key('evseId')
                         .value(evse_id))
            .query_param(Parameter()
                         .key('locationExternalId')
                         .value(location_external_id))
            .query_param(Parameter()
                         .key('evseExternalId')
                         .value(evse_external_id))
            .query_param(Parameter()
                         .key('pageNumber')
                         .value(page_number))
            .query_param(Parameter()
                         .key('perPage')
                         .value(per_page))
            .query_param(Parameter()
                         .key('updatedSince')
                         .value(updated_since))
            .query_param(Parameter()
                         .key('country')
                         .value(country))
            .query_param(Parameter()
                         .key('excludeCountry')
                         .value(exclude_country))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Response.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', BadRequestException)
            .local_error('401', 'The request has not been applied because it lacks valid authentication credentials for the target resource.', UnauthorizedException)
            .local_error('404', 'Location Not Found', NotFoundException)
            .local_error('429', 'The Request reached maximum allocated rate limit', TooManyRequestsException)
            .local_error('500', 'Internal Server error', InternalServerErrorException)
            .local_error('503', 'Service unavailable', ServiceunavailableException)
        ).execute()

    def ev_locations_by_id(self,
                           request_id,
                           id,
                           provider_id=None,
                           since=None):
        """Does a GET request to /locations/v1/ev/{id}.

        This API provides the details on a single Shell Recharge location. 
        The query for a single location is to be made using the Unique
        Internal identifier used to refer to this Location by Shell Recharge.
        (Uid from List of locations API)

        Args:
            request_id (uuid|str): RequestId must be unique identifier value
                that can be used by the consumer to correlate each request
                /response .<br>Format.<br> Its canonical textual
                representation, the 16 octets of a UUID are represented as 32
                hexadecimal (base-16) digits, displayed in five groups
                separated by hyphens, in the form 8-4-4-4-12 for a total of 36
                characters (32 hexadecimal characters and 4 hyphens) <br>
            id (str): Unique Uid of the location from List of locations API
            provider_id (str, optional): The provider id that you wish to see
                locations and tariffs for
            since (str, optional): to get the locations modified after a date

        Returns:
            Response: Response from the API. Paginated list of locations

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locations/v1/ev/{id}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('providerId')
                         .value(provider_id))
            .query_param(Parameter()
                         .key('since')
                         .value(since))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Response.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', BadRequestException)
            .local_error('401', 'The request has not been applied because it lacks valid authentication credentials for the target resource.', UnauthorizedException)
            .local_error('404', 'Location Not Found', NotFoundException)
            .local_error('429', 'The Request reached maximum allocated rate limit', TooManyRequestsException)
            .local_error('500', 'Internal Server error', InternalServerErrorException)
            .local_error('503', 'Service unavailable', ServiceunavailableException)
        ).execute()

    def nearby_locations(self,
                         request_id,
                         latitude,
                         longitude,
                         limit=25,
                         location_external_id=None,
                         evse_id=None,
                         evse_external_id=None,
                         operator_name=None,
                         evse_status=None,
                         connector_types=None,
                         connector_min_power=None,
                         authorization_methods=None,
                         with_operator_name=None,
                         with_max_power=None,
                         country=None,
                         exclude_country=None):
        """Does a GET request to /locations/v1/ev/nearby.

        This API provides the list of all nearby Shell Recharge locations
        based on the latitude and longitude provided in the request. 
        The list includes all Shell Recharge network and all sites available
        through our roaming partners.
        The end point provides the details such as the exact location/address
        of the site along with the up-to-date status information of all the
        charging units in the site. 
        Supported Search Options
        * Based on latitude and longitude of the location. (Mandatory)
        * Based on status of the Charging units. Eg : Available or Occupied
        * Based on available connector types.
        * Based on minimum Power output (in kW) available

        Args:
            request_id (uuid|str): RequestId must be unique identifier value
                that can be used by the consumer to correlate each request
                /response .<br>Format.<br> Its canonical textual
                representation, the 16 octets of a UUID are represented as 32
                hexadecimal (base-16) digits, displayed in five groups
                separated by hyphens, in the form 8-4-4-4-12 for a total of 36
                characters (32 hexadecimal characters and 4 hyphens) <br>
            latitude (float): Latitude to get Shell Recharge Locations nearby
            longitude (float): Longitude to get Shell Recharge Locations
                nearby
            limit (float, optional): Maximum number of Locations to retrieve
            location_external_id (str, optional): Filter by Locations with the
                given externalId Identifier as given by the Shell Recharge
                Operator, unique for that Operator
            evse_id (str, optional): Filter by Locations that have an Evse
                with the given Evse Id
            evse_external_id (str, optional): Filter by Locations that have an
                Evse with the given External Id Identifier of the Evse as
                given by the Operator, unique for that Operator
            operator_name (str, optional): Filter by Locations that have the
                given operator
            evse_status (NearbyLocationsEvseStatusEnum, optional): Filter by
                Locations that have the given status
            connector_types (NearbyLocationsConnectorTypesEnum, optional):
                Filter by Locations that have Connectors with these Connector
                Types
            connector_min_power (float, optional): Filter by Locations that
                have a Connector with at least this power output (in kW)
            authorization_methods (NearbyLocationsAuthorizationMethodsEnum,
                optional): Filter by Locations that support the given
                Authorization Methods
            with_operator_name (bool, optional): Return operator name in
                marker object (only for marker type Single ChargePoint)
            with_max_power (bool, optional): Return maximum power in kW across
                all locations grouped in this marker (disregarding
                availability)
            country (List[str], optional): Filter by Locations that are at
                least in one of the given countries (specified using ISO
                3166-1 alpha-3 codes)
            exclude_country (List[str], optional): Filter by Locations that
                are not in one of the given countries (specified using ISO
                3166-1 alpha-3 codes)

        Returns:
            Response: Response from the API. Location

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locations/v1/ev/nearby')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .query_param(Parameter()
                         .key('latitude')
                         .value(latitude))
            .query_param(Parameter()
                         .key('longitude')
                         .value(longitude))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('locationExternalId')
                         .value(location_external_id))
            .query_param(Parameter()
                         .key('evseId')
                         .value(evse_id))
            .query_param(Parameter()
                         .key('evseExternalId')
                         .value(evse_external_id))
            .query_param(Parameter()
                         .key('operatorName')
                         .value(operator_name))
            .query_param(Parameter()
                         .key('evseStatus')
                         .value(evse_status))
            .query_param(Parameter()
                         .key('connectorTypes')
                         .value(connector_types))
            .query_param(Parameter()
                         .key('connectorMinPower')
                         .value(connector_min_power))
            .query_param(Parameter()
                         .key('authorizationMethods')
                         .value(authorization_methods))
            .query_param(Parameter()
                         .key('withOperatorName')
                         .value(with_operator_name))
            .query_param(Parameter()
                         .key('withMaxPower')
                         .value(with_max_power))
            .query_param(Parameter()
                         .key('country')
                         .value(country))
            .query_param(Parameter()
                         .key('excludeCountry')
                         .value(exclude_country))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Response.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', BadRequestException)
            .local_error('401', 'The request has not been applied because it lacks valid authentication credentials for the target resource.', UnauthorizedException)
            .local_error('404', 'Location Not Found', NotFoundException)
            .local_error('429', 'The Request reached maximum allocated rate limit', TooManyRequestsException)
            .local_error('500', 'Internal Server error', InternalServerErrorException)
            .local_error('503', 'Service unavailable', ServiceunavailableException)
        ).execute()

    def locations_markers(self,
                          request_id,
                          west,
                          south,
                          east,
                          north,
                          zoom,
                          evse_status=None,
                          connector_types=None,
                          connector_min_power=None,
                          authorization_methods=None,
                          with_operator_name=None,
                          with_max_power=None,
                          location_external_id=None,
                          evse_id=None,
                          evse_external_id=None,
                          operator_name=None,
                          country=None,
                          exclude_country=None):
        """Does a GET request to /locations/v1/ev/markers.

        This API, when given a set of bounds on the geographical front
        (East,West, North, South) will return a set of Markers that fall
        within the requested bounds. The API will automatically group
        locations at the same position on the map into one Marker. 
        The API also provide further search options to filter the result set.
                  * Based on status of the Charging units. Eg : Available or Occupied
          * Based on available connector types.
          * Based on minimum Power output (in kW) available

        Args:
            request_id (uuid|str): RequestId must be unique identifier value
                that can be used by the consumer to correlate each request
                /response .<br>Format.<br> Its canonical textual
                representation, the 16 octets of a UUID are represented as 32
                hexadecimal (base-16) digits, displayed in five groups
                separated by hyphens, in the form 8-4-4-4-12 for a total of 36
                characters (32 hexadecimal characters and 4 hyphens) <br>
            west (float): Longitude of the western bound to get the Shell
                Recharge Locations
            south (float): Latitude of the southern bound to get the Shell
                Recharge Locations
            east (float): Longitude of the eastern bound to get the Shell
                Recharge Locations
            north (float): Latitude of the northern bound to get the Shell
                Recharge Locations
            zoom (str): Zoom level to show ex: (1: World, 5:
                Landmass/continent, 10: City, 15: Streets, 20: Buildings)
            evse_status (LocationsMarkersEvseStatusEnum, optional): Filter by
                Locations that have the given status
            connector_types (LocationsMarkersConnectorTypesEnum, optional):
                Filter by Locations that have Connectors with the set of
                Connector Types
            connector_min_power (float, optional): Filter by Locations that
                have a Connector with at least this power output (in kW)
            authorization_methods (LocationsMarkersAuthorizationMethodsEnum,
                optional): Filter by Locations that support the given
                Authorization Methods
            with_operator_name (bool, optional): Return operator name in
                marker object (only for marker type SingleChargePoint)
            with_max_power (bool, optional): Return maximum power in kW across
                all locations grouped in this marker (disregarding
                availability)
            location_external_id (str, optional): Filter by Locations with the
                given externalId. (Unique Location externalID provided by
                Shell Recharge)
            evse_id (str, optional): Filter by Locations that have an Evse
                with the given Evse Id
            evse_external_id (str, optional): Filter by Locations that have an
                Evse with the given External Id Identifier of the Evse as
                given by the Operator, unique for that Operator
            operator_name (str, optional): Filter by Locations that have the
                given operator
            country (List[str], optional): Filter by Locations that are at
                least in one of the given countries (specified using ISO
                3166-1 alpha-3 codes)
            exclude_country (List[str], optional): Filter by Locations that
                are not in one of the given countries (specified using ISO
                3166-1 alpha-3 codes)

        Returns:
            SingleLocationMarkerResponse: Response from the API. Array of
                Markers

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/locations/v1/ev/markers')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .query_param(Parameter()
                         .key('west')
                         .value(west))
            .query_param(Parameter()
                         .key('south')
                         .value(south))
            .query_param(Parameter()
                         .key('east')
                         .value(east))
            .query_param(Parameter()
                         .key('north')
                         .value(north))
            .query_param(Parameter()
                         .key('zoom')
                         .value(zoom))
            .query_param(Parameter()
                         .key('evseStatus')
                         .value(evse_status))
            .query_param(Parameter()
                         .key('connectorTypes')
                         .value(connector_types))
            .query_param(Parameter()
                         .key('connectorMinPower')
                         .value(connector_min_power))
            .query_param(Parameter()
                         .key('authorizationMethods')
                         .value(authorization_methods))
            .query_param(Parameter()
                         .key('withOperatorName')
                         .value(with_operator_name))
            .query_param(Parameter()
                         .key('withMaxPower')
                         .value(with_max_power))
            .query_param(Parameter()
                         .key('locationExternalId')
                         .value(location_external_id))
            .query_param(Parameter()
                         .key('evseId')
                         .value(evse_id))
            .query_param(Parameter()
                         .key('evseExternalId')
                         .value(evse_external_id))
            .query_param(Parameter()
                         .key('operatorName')
                         .value(operator_name))
            .query_param(Parameter()
                         .key('country')
                         .value(country))
            .query_param(Parameter()
                         .key('excludeCountry')
                         .value(exclude_country))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('BearerAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SingleLocationMarkerResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', BadRequestException)
            .local_error('401', 'The request has not been applied because it lacks valid authentication credentials for the target resource.', UnauthorizedException)
            .local_error('404', 'Location Not Found', NotFoundException)
            .local_error('429', 'The Request reached maximum allocated rate limit', TooManyRequestsException)
            .local_error('500', 'Internal server error', InternalServerErrorException)
            .local_error('503', 'Service unavailable', ServiceunavailableException)
        ).execute()
