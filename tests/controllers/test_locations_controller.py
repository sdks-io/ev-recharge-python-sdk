# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from shellev.api_helper import APIHelper


class LocationsControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(LocationsControllerTests, cls).setUpClass()
        cls.controller = cls.client.locations
        cls.response_catcher = cls.controller.http_call_back

    # This API provides the list of all Shell Recharge locations. The list includes all Shell Recharge network and all locations available through our roaming partners. The end point provides flexible search criteria in order to get the list of Shell Recharge Network. The end point provides the details such as the exact location/address of the site along with the up-to-date status information of all the charging units in the site. 
    #
    #Supported Search Options
    #
    #* Based on status of the Charging units. Eg : Available or Occupied
    #* Based on available connector types.
    #* Based on minimum Power output (in kW) available
    #* Based on a specific charging unit ID (EVSE ID)
    def test_get_ev_locations(self):
        # Parameters for the API call
        request_id = '123e4567-e89b-12d3-a456-426614174000'
        evse_status = None
        connector_types = None
        connector_min_power = None
        authorization_methods = None
        with_operator_name = None
        evse_id = 'NL*TNM*E01000401*0'
        location_external_id = None
        evse_external_id = None
        page_number = None
        per_page = None
        updated_since = None
        country = APIHelper.json_deserialize('["NED"]')
        exclude_country = APIHelper.json_deserialize('["NED"]')

        # Perform the API call through the SDK function
        result = self.controller.get_ev_locations(request_id, evse_status, connector_types, connector_min_power, authorization_methods, with_operator_name, evse_id, location_external_id, evse_external_id, page_number, per_page, updated_since, country, exclude_country)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


